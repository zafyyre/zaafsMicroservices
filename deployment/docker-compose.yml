version: '3.3'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
    - "2181"
    hostname: zookeeper
    container_name: "zookeeper"

  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: kafka
    container_name: "kafka"
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: acit3855-lab6a.westus.cloudapp.azure.com # docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://acit3855-lab6a.westus.cloudapp.azure.com:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
    - "zookeeper"

  db:
    env_file:
      - .env
    image: mysql:5.7
    restart: always
    container_name: "mysql"
    environment:
      MYSQL_DATABASE: 'events'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: ${MYSQL_USERNAME}
      # You can use whatever password you like
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      # Password for root access
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
    expose:
      # Opens port 3306 on the container
      - '3306'
      # Where our data will be persisted
    volumes:
      - my-db:/var/lib/mysql

  receiver:
    build:
     context: ./receiver
     dockerfile: Dockerfile
    restart: always
    container_name: "receiver"
    ports:
      - 8080:8080
    networks:
      - bridge

  storage:
    build:
     context: ./storage
     dockerfile: Dockerfile
    restart: always
    container_name: "storage"
    ports:
      - 8090:8090
    networks:
      - bridge

  processing:
    build:
     context: ./processing
     dockerfile: Dockerfile
    restart: always
    container_name: "processing"
    ports:
      - 8100:8100
    networks:
      - bridge

  audit:
    build:
     context: ./audit
     dockerfile: Dockerfile
    restart: always
    container_name: "audit"
    ports:
      - 8110:8110
    networks:
      - bridge

# Names our volume
volumes:
  my-db:

networks:
  bridge: 
    driver: bridge